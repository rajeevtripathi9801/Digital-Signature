Simplified AES, RSA and Digital Signture generation and verification using python -Shubham Gupta

# Libraries used are
import asyncio 
import sys 
import websockets 
import threading 
import numpy as np 
import json 
import hashlib
import random

Detailed overview is discussed below.

## For RSA Implementation
Following functionare used: genertekeypair(): It generate public and private key pair for givin prime number 'p' and 'q'. r_encrypt(): This function is used to encrypt message using publickey and message. r_decrypt(): This function is used to decrypt message using privatekey and message. also isprime() is used to check for prime.

Also hashlib is used to generate hexadecimal digest. and then digest is used to encrypt and generate digital signature. now at server side this signature is decrypted and compared with digest generated at server side and the signature is matched.

Also cipher key is encrypted at client side using public key of server and decrypted at server using private key of server to generate orignal key entered.

## For Aes Implementation
To implement S-AES we use python and socket programming and create a client and a server file in which client enter plain text of 16 bit and a key and by AES algorithm plain text is encrypted to generate cipher text at client side now by using socket will send the generated ciphertext to server , server receive the cipher text and decrypt it using AES algorithm. Lets assume the inputs for the encryption are:

• 16-bit Plaintext, P:

• 16-bit Key, K
# Key Generation
The first step is to generate the sub-keys. This is called Key Generation or Key Expansion:

The input key, K, is split into 2 words, w0 and w1: The function keyExp() is used to generate the key.

Sub2Nib() function is used to apply S-Box substitution on nibbles using encryption S-Box

# Encryption
Now let’s do the encryption. There is an initial operation (Add Round Key), followed by the main Round, followed by the final Round..

Remember, the output of each operation is used as the input to the next operation, always operating on 16-bits. The 16-bits can be viewed as a state matrix of nibbles. Add Round 0 Key

Plaintext XOR Key1

#Round 1
Nibble Substitution (S-boxes). Each nibble in the input is used in the Encryption S-Box to generate an output nibble.

Mix Columns. Apply the matrix multiplication with the constant matrix,

#Final Round
Nibble Substitution (S-boxes)

Shift Row () shifted element of row to right side.I.e (right shift)

Add Round 2 Key (round 2 key is added)

Now we have the final ciphertext.

# Decryption
Now lets decrypt. Note that we use the same keys generated during the encryption (that is, the decryptor would generate the round sub-keys using the input key K, using the encryption S-Box).

Add Round 2 Key
Inverse Shift Row (same as normal)

Inverse Nibble Sub (by using the decryption S-box)

Add Round 1 Key
Inverse Mix Columns

Inverse Shift Row

Inverse Nibble Sub

Add Round 0 Key

Plaintext and Original are same

The decryption worked!

# flow of file run
*server.py 
*client.py

# for RSA run RSA.py